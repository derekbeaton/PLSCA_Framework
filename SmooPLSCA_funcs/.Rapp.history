###I really need to get this into GitHub or something...#
	##I also really need to trim this file down, and make things faster.#
####I NEED A SUPPLEMENTAL PROJECTIONS FUNCTION FOR THE GSVD STUFF.#
require(TInPosition)#
require(MASS)#
require(bigalgebra) ##for later.#
require(Matrix)#
require(matrixcalc)#
#
##a function specifically for sqrt'ing a matrix#
##stolen from http://stackoverflow.com/questions/11057639/identifying-if-only-the-diagonal-is-non-#
sqrt.mat <- function(X,tol=sqrt(.Machine$double.eps)){#
	isDiagonal.matrix <- function(X){#
		if(is.null(dim(X))){#
			stop("sqrt.mat: X is not a matrix.")#
		}#
		return(all(X[lower.tri(X)] == 0, X[upper.tri(X)] == 0))#
	}#
	##first, test if it is symmetric in size; and other symmetric properties.#
	  if(!isSymmetric.matrix(X,tol=tol)){#
		  stop("sqrt.mat: Weight/Mass matrix is not symmetric")#
	  }#
	##test if it is a diagonal matrix -- then just sqrt it and send back.#
	if(isDiagonal.matrix(X)){#
		return(  diag(sqrt(diag(X))) )#
	}else{#
		A <- eigen(X)#
		##test for complex values:#
		if(any(unlist(lapply(A$values,is.complex)))){#
			stop("sqrt.mat: Weight/Mass matrix not positive definitive. Eigenvalues are complex.")#
		}#
		##change values below tolerance		#
		A$values[which(A$values < tol)] <- 0#
#
		##first, test if positive definite#
		if( sum(A$values < 0 )>0 ){#
			stop("sqrt.mat: Weight/Mass matrix not positive definite. Some eigenvalues are less than 0")	#
		}else{		#
			return(A$vectors %*% diag(sqrt(A$values)) %*% t(A$vectors))#
		}#
	}#
}#
#
###Is this the same as the projmaker?#
takanePreProc <- function(t.dat.nom,lambda,projmat=NULL){#
	####I can update this later by expanding what L can be.#
		###Which, technically, can be a diagonal matrix. But requires more effort for LW and RW#
	t.dat.center <- scale(t.dat.nom,scale=F)#
	if( is.null(projmat) ){#
		pm <- t(t.dat.center) %*% svd.pinv_sq( tcrossprod(t.dat.center) ) %*% t.dat.center#
	} ##I can just make this a diagonal... probably.#
	LW <- diag(nrow(t.dat.nom)) + (lambda * svd.pinv_sq( tcrossprod(t.dat.center) ) )	#
	rownames(LW) <- colnames(LW) <- rownames(t.dat.nom)#
	RW <- diag(colSums(t.dat.nom)) + (lambda * projmat)#
	rownames(RW) <- colnames(RW) <- colnames(t.dat.nom)#
	return(list(dat=t.dat.center,LW=LW,RW=RW,projmat=projmat))#
}#
#
gsvd <- function(G.DAT,LW,RW,k=5){#
	dat.for.svd <- sqrt.mat(LW) %*% G.DAT %*% sqrt.mat(RW)#
	res <- svd(dat.for.svd,nu=k,nv=k)#
	d <- res$d#
	precisionLimit <- 2 * .Machine$double.eps#
	indToKeep <- which(d^2 > precisionLimit)#
	d <- d[indToKeep]#
	tau <- d^2/sum(d^2)#
	comp.ret <- min(length(indToKeep),k)#
	res$u <- res$u[,1:comp.ret]#
	res$v <- res$v[,1:comp.ret]#
	P <- sqrt.mat(svd.pinv_sq(LW)) %*% res$u#
	rownames(P) <- rownames(G.DAT)#
	Q <- sqrt.mat(svd.pinv_sq(RW)) %*% res$v	#
	rownames(Q) <- colnames(G.DAT)	#
    return(list(p = P, q = Q, u=res$u, v=res$v, Dv = d[1:comp.ret], Dv.orig=d, tau = tau))#
}#
#
rplsca <- function(X,Y,lambda.x=NULL,lambda.y=NULL,as.is=F,projmat.X=NULL,projmat.Y=NULL,k=5){#
#
	if( is.null(lambda.x) & is.null(lambda.y) ){#
		lambda.x <- lambda.y <- 0#
	}else if( !is.null(lambda.x) & is.null(lambda.y) ){#
		lambda.y <- lambda.x#
	}else if( is.null(lambda.x) & !is.null(lambda.y) ){#
		lambda.x <- lambda.y#
	}#
	X.preproc <- takanePreProc(X,lambda.x,projmat.X)#
	Y.preproc <- takanePreProc(Y,lambda.y,projmat.Y)#
	if(as.is){ ##can lead us to a CA regularization...#
		X.dat <- X.preproc$dat#
		Y.dat <- Y.preproc$dat#
	}else{	#
		X.dat <- sqrt.mat(X.preproc$LW) %*% X.preproc$dat#
		Y.dat <- sqrt.mat(Y.preproc$LW) %*% Y.preproc$dat			#
	}#
	R.dat <- t( X.dat %*% svd.pinv_sq(X.preproc$RW) ) %*% ( Y.dat %*% svd.pinv_sq(Y.preproc$RW) )#
	rownames(R.dat) <- colnames(X.dat)#
	colnames(R.dat) <- colnames(Y.dat)	#
	gres.out <- gsvd(R.dat,X.preproc$RW,Y.preproc$RW,k=k)#
	gres.out$LX <- X.dat %*% gres.out$p#
	gres.out$LY <- Y.dat %*% gres.out$q#
	gres.out$fi <- gres.out$p %*% diag(gres.out$Dv)#
	gres.out$fj <- gres.out$q %*% diag(gres.out$Dv)#
	opt.arr <- array(NA,dim=c(length(gres.out$Dv),length(gres.out$Dv),4))#
	opt.arr[,,1] <- t(gres.out$fi) %*% X.preproc$RW %*% gres.out$fi#
	opt.arr[,,2] <- t(gres.out$fj) %*% Y.preproc$RW %*% gres.out$fj#
	opt.arr[,,3] <- t(gres.out$LX) %*% gres.out$LY#
	opt.arr[,,4] <- cor(gres.out$LX,gres.out$LY)#
	gres.out$optimizations <- opt.arr#
#
	gres.out$preprocs <- list(X=X.preproc, Y=Y.preproc)#
#
	return(gres.out)#
}#
rmca <- function(X,lambda=NULL,projmat=NULL,k=5){#
#
	if( is.null(lambda) ){#
		lambda <- 0#
	}#
	X.preproc <- takanePreProc(X,lambda,projmat)#
	gres.out <- gsvd( X.preproc$dat %*% ginv(X.preproc$RW) , X.preproc$LW , X.preproc$RW )	#
	gres.out$fi <- gres.out$p %*% diag(gres.out$Dv)#
	gres.out$fj <- gres.out$q %*% diag(gres.out$Dv)#
	opt.arr <- array(NA,dim=c(length(gres.out$Dv),length(gres.out$Dv),2))#
		fi.opt <- t(gres.out$fi) %*% X.preproc$LW %*% gres.out$fi#
		fi.opt[abs(fi.opt) < .Machine$double.eps*1000] <- 0#
	opt.arr[,,1] <- fi.opt#
		fj.opt <- t(gres.out$fj) %*% X.preproc$RW %*% gres.out$fj#
		fj.opt[abs(fj.opt) < .Machine$double.eps*1000] <- 0#
	opt.arr[,,2] <- fj.opt#
	gres.out$optimizations <- opt.arr#
#
	return(gres.out)#
}#
#
rca <- function(X,lambda=NULL,makeNom=T,colSX=NULL,k=5){#
}#
#
###Am using this in place of ginv() for square symmetric matrices. ginv() returns some rounding errors and makes the eigenvalues imaginary. #
svd.pinv_sq <- function(X,tol=sqrt(.Machine$double.eps)){#
	if( !isSymmetric.matrix(X, tol= tol) ){#
		stop("svd.pinv_sq: Matrix not symmetric")#
	}	#
	res <- svd(X)#
	drop.vecs <- which(res$d < tol)#
	if(length(drop.vecs) > 0){#
		res$d <- res$d[-c(drop.vecs)]#
		res$u <- res$u[,-c(drop.vecs)]#
			res$u[abs(res$u) < tol] <- 0#
	}	#
	return( (res$u * matrix(1/res$d,nrow(res$u),ncol(res$u),byrow=T)) %*% t(res$u) )#
}#
#
##will need: https://stat.ethz.ch/R-manual/R-devel/library/Matrix/html/bdiag.html#
	###OK so this is a just a block matrix where I can already know the values.#
	###The values are based on # of variables.#
projmat.maker <- function(t.dat.center,colDesign,tol=.Machine$double.eps*100){#
	tJ <- matrix(0,ncol(t.dat.center),ncol(t.dat.center))	#
	for(i in 1:nrow(colDesign)){#
		#places <- which(colDesign[i,]==1)#
		#tJ[places,places] <- t(t.dat.center[,places]) %*% ginv( tcrossprod(t.dat.center[,places]) ) %*% t.dat.center[,places]#
		places <- which(colDesign[i,]==1)#
		tJ[places,places] <- t(t.dat.center[,places]) %*% ginv(t.dat.center[,places] %*% t(t.dat.center[,places])) %*% t.dat.center[,places]		#
	}#
	tJ[abs(tJ) < tol] <- 0#
	rownames(tJ) <- colnames(tJ) <- colnames(t.dat.center)#
	return(tJ)#
}#
#
#dat_des_proj.maker <- function(X,makeNom=T,makeProj=F){#
dat_des_proj.maker <- function(X,makeNom=T){#
	if(makeNom){#
		X <- makeNominalData(X)#
		#X.colStruct <- apply(X,2,function(x){length(unique(x[!is.na(x)]))})#
	}#
	X.center <- scale(X,scale=F)#
	colSX.things <- unlist(lapply(strsplit(colnames(X),"\\."),function(x){x[1]}))#
	X.colDesign <- matrix(0,length(unique(colSX.things)),length(colSX.things))#
	rownames(X.colDesign) <- unique(colSX.things)#
	colnames(X.colDesign) <- colSX.things#
		##THIS CAN BE PARALLEL.#
	for(i in 1:nrow(X.colDesign)){#
		these.locs <- which(colnames(X.colDesign) %in% rownames(X.colDesign)[i])#
		X.colDesign[i,these.locs] <- 1#
	}#
#	if(makeProj){#
		X.projmat <- projmat.maker(X.center,X.colDesign)#
#	}#
	return(list(dat=X, dat.center=X.center, colDesign=X.colDesign, projmat=X.projmat))#
}#
rplsca.supProj <- function(X,Y,lambda.x=NULL,lambda.y=NULL,as.is=F,projmat.X=NULL,projmat.Y=NULL,fi.scores,fj.scores,Dv,p.scores=NULL,q.scores=NULL){#
#
	if( is.null(lambda.x) & is.null(lambda.y) ){#
		lambda.x <- lambda.y <- 0#
	}else if( !is.null(lambda.x) & is.null(lambda.y) ){#
		lambda.y <- lambda.x#
	}else if( is.null(lambda.x) & !is.null(lambda.y) ){#
		lambda.x <- lambda.y#
	}#
#
	X.preproc <- takanePreProc(X,lambda.x,projmat.X)#
	Y.preproc <- takanePreProc(Y,lambda.y,projmat.Y)#
	if(as.is){ ##can lead us to a CA regularization...#
		X.dat <- X.preproc$dat#
		Y.dat <- Y.preproc$dat#
	}else{	#
		X.dat <- sqrt.mat(X.preproc$LW) %*% X.preproc$dat#
		Y.dat <- sqrt.mat(Y.preproc$LW) %*% Y.preproc$dat			#
	}#
#
	R.dat <- t( X.dat ) %*% ( Y.dat )#
	sup.fj <- svd.pinv_sq(Y.preproc$RW) %*% t(R.dat) %*% (fi.scores %*% diag(Dv^-1))#
	sup.fi <- svd.pinv_sq(X.preproc$RW) %*% R.dat %*% (fj.scores %*% diag(Dv^-1))#
	if( !is.null(p.scores) & !is.null(p.scores)){#
		sup.LX <- X.dat %*% p.scores#
		sup.LY <- Y.dat %*% q.scores#
		return(list(sup.fi=sup.fi,sup.fj=sup.fj,sup.LX=sup.LX,sup.LY=sup.LY))#
	}else{#
		return(list(sup.fi=sup.fi,sup.fj=sup.fj))#
	}#
}#
#
per.LV <- function(orig.LX,orig.LY,DES1,proj.LX,proj.LY,DES2){#
	##how many LVs?#
	num.LVs <- ncol(orig.LX)#
	sup.pred.nl.acc <- orig.pred.nl.acc <- vector("numeric",num.LVs)#
#
	for(nl in 1:num.LVs){#
		orig.LV <- cbind(orig.LX[,nl],orig.LY[,nl])#
		sup.LV <- cbind(proj.LX[,nl],proj.LY[,nl])#
		grp.mat <- matrix(NA,ncol(DES1),2)#
		rownames(grp.mat) <- colnames(DES1)#
		for(g in 1:ncol(DES1)){#
			grp.mat[g,] <- colMeans(orig.LV[which(DES1[,g]==1),])#
		}#
			##maybe just make these accs.#
		orig.pred.nl <- fii2fi(DES1,orig.LV,grp.mat)$confusion#
			orig.pred.nl.acc[nl] <- sum(diag(orig.pred.nl)) / sum(orig.pred.nl)#
		sup.pred.nl <- fii2fi(DES2,sup.LV,grp.mat)$confusion#
			sup.pred.nl.acc[nl] <- sum(diag(sup.pred.nl)) / sum(sup.pred.nl)		#
	}#
	orig.lvs <- cor(orig.LX,orig.LY)#
	sup.lvs <- cor(proj.LX, proj.LY)#
	return(list(orig.lvs= orig.lvs, sup.lvs= sup.lvs, orig.pred.nl.acc = orig.pred.nl.acc, sup.pred.nl.acc = sup.pred.nl.acc))#
}#
add.alpha <- function(col, alpha = .6) {apply(sapply(col, col2rgb)/255, 2, function(x) rgb(x[1], x[2], x[3], alpha = alpha))}#
####Not needed but OK to have around:#
ca.preproc <- function(X){#
	Ox <- X/sum(X)#
	m <- rowSums(Ox)#
	w <- colSums(Ox)#
	Ex <- m %o% w#
	Zx <- Ox - Ex#
	return( list(m=m,w=w,Zx=Zx) )#
}#
#
ca <- function(Zx,M,W){#
	ca.res <- gsvd(Zx,M,W)#
	ca.res$fi <- M %*% ca.res$p %*% diag(ca.res$Dv)#
	ca.res$fj <- W %*% ca.res$q %*% diag(ca.res$Dv)#
	return( ca.res )#
}#
#
##an alternative square root function for rectangular matrices (if needed).#
svd.sqrt.mat <- function(X,tol=sqrt(.Machine$double.eps)){#
	if( !isSymmetric.matrix(X) ){#
		stop("svd.sqrt.mat: Matrix not symmetric")#
	}	#
	res <- svd(X)#
	drop.vecs <- which(res$d < tol )#
	if(length(drop.vecs) > 0){#
		res$d <- res$d[-c(drop.vecs)]#
		res$u <- res$u[,-c(drop.vecs)]#
			res$u[abs(res$u) < tol] <- 0#
		res$v <- res$v[,-c(drop.vecs)]		#
			res$v[abs(res$v) < tol] <- 0#
	}#
	return( (res$u * matrix(sqrt(res$d),nrow(res$u),ncol(res$u),byrow=T)) %*% t(res$v) )#
}#
#
###not using this as of now, but can later.#
svd.pinv <- function(X,tol=sqrt(.Machine$double.eps)){#
	res <- svd(X)#
	drop.vecs <- which(res$d < tol )#
	if(length(drop.vecs) > 0){#
		res$d <- res$d[-c(drop.vecs)]#
		res$u <- res$u[,-c(drop.vecs)]#
			res$u[abs(res$u) < tol] <- 0#
		res$v <- res$v[,-c(drop.vecs)]		#
			res$v[abs(res$v) < tol] <- 0#
	}	#
	return( (res$v * matrix(1/res$d,nrow(res$v),ncol(res$v),byrow=T)) %*% t(res$u) )#
}
data(snps.druguse)
snps.druguse$DATA1
fuckyou <- makeNominalData(snps.druguse$DATA1)
fuckT <- takanePreProc(fuckyou)
fuckT <- takanePreProc(fuckyou,0)
fuckyou
colnames(fuckyou)
fuckT <- takanePreProc(fuckyou,0,diag(6))
fuckT
whatres <- gsvd(fuckT$dat %*% ginv(fuckT$RW),fuckT$LW,fuckT$RW)
whatres$Dv
shitres <- epCA(fuckyou,graphs=F)
shitres$ExPosition.Data$pdq$Dv
whatres$Dv/shitres$ExPosition.Data$pdq$Dv
(whatres$Dv/shitres$ExPosition.Data$pdq$Dv)^2
fuckT$dat
fuckT$LW
fuckT$RW
crossprod(fuckyou)
crossprod(fuckyou[,1:2])
library('bigalgebra')#
library('irlba')#
library('rsvd')
X <- matrix(rnorm(100000000),1000, 100000)#
X2 <- as.big.matrix(X)
?rsvd
rsvd.res <- rsvd(X,2)
irlba.res <- irlba(X,2,2)
names(rsvd.res)
rsvd.res$d
irlba.res$d
svd.res <- svd(X,nu=2,nv=2)
svd.res$d
dim(svd.res$u)
svd.res$d[1:2]
rsvd.res$d
irlba.res$d
X2 <- as.big.matrix(X)
matmult <- function(A, B=NULL, transpose=FALSE, send.big=F) {#
	# Bigalgebra requires matrix/vector arguments if(is.null(dim(B))) B = cbind(B) #
	#if(is.null(dim(B))) B = cbind(B)#
#
	# if(is.null(B)){#
		# B <- t(A) ##I don't know... whatever; probably won't use this.	#
	# }else{#
		if(transpose){#
			if(send.big){#
				return(cbind((t(B) %*% A)))#
			}else{#
				return(cbind((t(B) %*% A)[]))				#
			}#
		}else{#
			if(send.big){#
				return(cbind((A %*% B)))#
			}else{#
				return(cbind((A %*% B)[]))				#
			}#
		}#
	# }#
}
system.time(matmult(X2,t(X2)))
class(X2)
systemtime(t(X2) %*% X2)
system.time(t(X2) %*% X2)
library("bigmemory")#
A <- big.matrix(5,4,init=1)#
B <- big.matrix(4,4,init=2)
C <- A#
D <- A[]
C
D
print(C - D)
D <- matrix(rnorm(16),4)#
E <- A
D
E
E[]
A
B
dim(A)
dim(B)
A %*% t(B)
A*A
A
1*2
A*A
class(A)
A %*% A
t(B)
t(B[])
library(bigpca)
library()
install.packages('bigpca')
library(bigpca)
A %*% big.t(B)
(A %*% big.t(B))[]
as.matrix(A) %*% t(as.matrix(B))
?irlba
set.seed(1)#
#
A <- matrix(runif(200),nrow=20)#
S <- irlba(A)#
S$d
S
dim(A)
S$d
set.seed(1)#
#
A <- matrix(runif(200),nrow=20)#
S <- irlba(A)#
S$d
S2 <- irlba(as.big.matrix(A))
S2 <- irlba(as.big.matrix(A)[])
tcrossprod(as.big.matrix(A))
ginv(A)
library(MASS)
ginv(A)
###not using this as of now, but can later.#
svd.pinv <- function(X,tol=sqrt(.Machine$double.eps)){#
	res <- svd(X)#
	drop.vecs <- which(res$d < tol )#
	if(length(drop.vecs) > 0){#
		res$d <- res$d[-c(drop.vecs)]#
		res$u <- res$u[,-c(drop.vecs)]#
			res$u[abs(res$u) < tol] <- 0#
		res$v <- res$v[,-c(drop.vecs)]		#
			res$v[abs(res$v) < tol] <- 0#
	}	#
	return( (res$v * matrix(1/res$d,nrow(res$v),ncol(res$v),byrow=T)) %*% t(res$u) )#
}
ginv(A) / svd.pinv(A)
?irlba
irlba(A,nv=0)
irlba(A,nv=min(nrow(A)-1,ncol(A)-1))
scale(as.big.matrix(A))
nrow(as.big.matrix(A))
wut <- irlba(A,nv=min(nrow(A)-1,ncol(A)-1))
wut$d
svd(A)$d
wut$d[1:9] / svd(A)$d
wut$d[1:9] / svd(A)$d[1:9]
wut$u[,1:9] / svd(A)$u[1:9]
wut$v[,1:9] / svd(A)$v[1:9]
rsvd(A)
svd(A)$u / rsvd(A)$u
svd(A)$d / rsvd(A)$d
svd(A)$u / rsvd(A)$u
Xmat <- matrix(rnorm(10000),nrow=100)
dim(Xmat)
Xmat <- matrix(rnorm(100000),nrow=100)
dim(Xmat)
rsvd.res <- rsvd(Xmat)
svd.res <- svd(Xmat)
Xmat <- matrix(rnorm(1000000),nrow=100)
svd.res <- svd(Xmat)
rsvd.res <- rsvd(Xmat)
irlba.res <- irbla(Xmat)
irlba.res <- irlba(Xmat)
Xmat <- matrix(rnorm(1000000),nrow=100)#
svd.time <- system.time(svd.res <- svd(Xmat))#
rsvd.time <- system.time(rsvd.res <- rsvd(Xmat))#
ltime <- system.time(irlba.res <- irlba(Xmat))#
Xmat2 <- matrix(rnorm(5000000),nrow=100)#
svd.time2 <- system.time(svd.res2 <- svd(Xmat2))#
rsvd.time2 <- system.time(rsvd.res2 <- rsvd(Xmat2))#
ltime2 <- system.time(irlba.res2 <- irlba(Xmat2))
svd.time
rsvd.time
ltime
Xmat3 <- matrix(rnorm(1000000),ncol=100)#
svd.time3 <- system.time(svd.res3 <- svd(Xmat3))#
rsvd.time3 <- system.time(rsvd.res3 <- rsvd(Xmat3))#
ltime3 <- system.time(irlba.res3 <- irlba(Xmat3))#
Xmat4 <- matrix(rnorm(5000000),ncol=100)#
svd.time4 <- system.time(svd.res4 <- svd(Xmat4))#
rsvd.time4 <- system.time(rsvd.res4 <- rsvd(Xmat4))#
ltime4 <- system.time(irlba.res4 <- irlba(Xmat4))
ltime4
rsvd.time4
svd.time4
svd.time3
rsvd.time3
ltime3
